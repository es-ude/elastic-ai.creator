[tool.poetry]
name = "elasticai.creator"
version = "0.59.2"
description = "Design, train and compile neural networks optimized specifically for FPGAs."
readme = "README.md"
repository = "https://github.com/es-ude/elastic-ai.creator"
authors = ["Department Embedded Systems - University Duisburg Essen"]
packages = [{ include = "elasticai/" }]
exclude = ["elasticai/**/*_test.py", "elasticai/**/test_*.py"]


[tool.poetry.dependencies]
python = ">= 3.10, <4.0"
torch = ">=1.11"
numpy = "^1.23.0"
tomlkit = "^0.13.2"


[tool.poetry.group.release.dependencies]
git-cliff = "^2.7.0"

[tool.poetry.group.testing.dependencies]
pytest = "^8.3.4"
pytest-cov = "^6.0.0"


[tool.poetry.group.lsp.dependencies]
python-lsp-server = "^1.12.0"
pylsp-mypy = "^0.6.9"
pylsp-rope = "^0.1.17"
ruff = "^0.8.3"


[tool.poetry.group.dev.dependencies]
pre-commit = "^4.0.1"
setuptools = "^67.5.1"
elasticai-runtime-env5 = {git = "https://github.com/es-ude/elastic-ai.runtime.enV5.git", rev = "a9bc18749b1c1666828453a47c9c37f6f0aa2d61"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pylint]
max-line-length = 88
accept-no-raise-doc = "False"
disable = "C0115, C0116, C0114" # disable missing docstring messages as they incourage adding noise comments


[tool.black]
preview = true


[tool.pytest.ini_options]
minversion = "6.0"
markers = [
  "simulation: possibly slow running integration tests including hw simulation",
]
testpaths = ["elasticai", "tests"]
python_files = ["*_test.py", "test_*.py"]


[tool.coverage.run]
omit = [
  "elasticai/creator/examples/*py",
  "elasticai/creator/tests/*py",
  "elasticai/creator/*Tests/*py",
  "elasticai/**/__init__.py",
]
source = ["elasticai/creator"]
command_line = "-m pytest -m 'not simulation'"



[tool.isort]
profile = "black"



[tool.ruff]
include = ["pyproject.toml", "src/**/*.py", "src/**/*.pyi", "test/**/*.py"]

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  ".devenv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["D101", "D102"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
