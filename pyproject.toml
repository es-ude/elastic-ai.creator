[tool.poetry]
name = "elasticai.creator"
version = "0.59.2"
description = "Design, train and compile neural networks optimized specifically for FPGAs."
readme = "README.md"
repository = "https://github.com/es-ude/elastic-ai.creator"
authors = ["Department Embedded Systems - University Duisburg Essen"]
packages = [{ include = "elasticai/" }]
exclude = ["elasticai/**/*_test.py", "elasticai/**/test_*.py"]


[tool.poetry.dependencies]
python = ">= 3.10, <4.0"
torch = ">=1.11"
numpy = "^1.23.0"
tomlkit = "^0.13.2"


[tool.poetry.dev-dependencies]
python-language-server = "^0.36.2"
mypy = "^1.13.0"
black = ">21.12"
pre-commit = "^3.0.0"
pylint = "^2.16.2"
pytest = "^7.2.2"
setuptools = "^67.5.1"
elasticai-runtime-env5 = {git = "https://github.com/es-ude/elastic-ai.runtime.enV5.git", rev = "a9bc18749b1c1666828453a47c9c37f6f0aa2d61"}


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pylint]
max-line-length = 88
accept-no-raise-doc = "False"
disable = "C0115, C0116, C0114" # disable missing docstring messages as they incourage adding noise comments


[tool.black]
preview = true


[tool.pytest.ini_options]
minversion = "6.0"
markers = [
  "simulation: possibly slow running integration tests including hw simulation",
]
testpaths = ["elasticai", "tests"]
python_files = ["*_test.py", "test_*.py"]


[tool.coverage.run]
omit = [
  "elasticai/creator/examples/*py",
  "elasticai/creator/tests/*py",
  "elasticai/creator/*Tests/*py",
  "elasticai/**/__init__.py",
]
source = ["elasticai/creator"]
command_line = "-m pytest"


[tool.importlinter]
root_package = "elasticai"
contract_types = [
  "package_private_modules: import_contract.PackagePrivateModules",
]


[[tool.importlinter.contracts]]
name = "package private"
type = "package_private_modules"
targets = ["elasticai.creator"]
sources = ["elasticai.creator"]


[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
major_on_zero = false
repository = "pypi"
upload_to_release = true
build_command = "python3 -m pip install poetry && poetry build"
branch = "main"
parser_angular_allowed_types = "chore,docs,feat,style,fix,refactor,wip,perf,revert"
parser_angular_minor_types = "feat"
parser_angular_patch_types = "fix,perf"


[tool.isort]
profile = "black"
